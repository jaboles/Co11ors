Description of env\msenv\btndrp

btndrp is derived from MSO's btndrp process which is defined at the bottom of this document.
Most of the original process is gone, but fragments (particularly the generated files) remain.

MSO's icons come in various color formats (4bit, 32bit) and sizes (16x16, 24x24). We have removed
formats that we don't use. The two that remain are:

	4 bit (16 color), 16x16		LS (low, small)
and	32 bit (ARGB), 16x16		HS (high, small)

The "LS" format is the default. All bitmaps must appear in this format.
The "HS" format is optional, although it is our preferred format for Visual Studio.

In the icons sub-folder you will find the individual bitmaps (.bmp)
The filename consists of the icon name followed by the two-letter code above. e.g.
	OpenLS.bmp	: "Open", Low color, small. (4bpp, 16x16)
	OpenHS.bmp	: "Open", High color, small. (32bpp, 16x16)

Since only the LS format is mandatory, the HS version may be missing.

At build time, these .bmp files are combined into "BSTRIPs" which are LZW compressed bitmap strips.
The BSTRIPs are compiled into resources in vsmsoui.dll
At the same time, a mapping is created for those images that have HS versions. The mapping file is
generated by BSTRIPS.EXE (otools\bin\x86) and put in %_NTTREE%\inc\i386\vsmso\tbbstrip.i

tborder.txt and tbbtent.h (tbbtn.pl)
-----------------------------------------
Since not every command has an icon, there is a mapping between MSO's command IDs (msotcidXXX)
and icon IDs (or "toolbar button entries"). This mapping is in otools\inc\gen\tbbtnent.h
When adding or removing bitmaps, this mapping needs to be updated. Note that adding a new HS
format bitmap to an existing button that has only LS format is easy and doesn't require updating
tbbtnent.h
The mapping is driven by an ordering file (in the original MSO button drop, all these files came
from the same database to ensure consistency).
The ordering file is "tborder.txt". Note the order that bitmaps appear in this list is arbitrary, but
a few images have deliberately been placed first so that they will all end up in the same BSTRIP
which helps startup performance.
There is a perl script, tbbtn.pl, that reads this ordering file and the full list of commands (tcids,
from otools\inc\gen\msobtn.h) to generate the tbbtnent.h mapping file.



Below is the orignal description of the button drop process from MSO
--------------------------------------------------------------------



Button Drop Process


The button drop process is a fairly complicated piece of machinery that moves icons,
and tcid/tbid into the build. To follow an icon through the button drop.

First the icon is uploaded to the website http:\\commandbars. The website will verify that the
icon is what the uploader says it is by verifying the size, and color depth. The file will
then be checked into the btndrp project.

Alternatively, the files can make it into the button drop process by running %btndrp%\mkbtndrp.bat.
This will copy the files from \\commandbar\icondrop, this is the location that http:\\commandbars
stores icons. Files will be added or edited in the btndrp project. The developer will need to
check this files in.

Once the icon is in the btndrp project it needs to get bundled up into a bstrip. This is done
by running %btndrp%\mkbstrps.bat or ohome btndrp. This process generates a slew of bstrips, as
well as some header files the describe the bstrips. These files are placed in %setup%\inc\btndrp.

At compile time of MSO, three text files are compiled, using perl scripts, into more header files.
These header files, in addtion to those generated in the previous step tell office how to read
the bstrips. The bstrips themselves are compression and added as a resource to the intl.dll.

BTNDRP Project:
%btndrp%\icons directory for icons. Each file in this directory represents a single icon in a 
signle format. The name of the file is the tcid followed by a two character code representing the
icon format. At this time we are using LS for low color small (16x16) icons, and HS for high
color small icons.
%btndrp%\tborder.txt: Order of the icons. This file describes the order the icons will appear
in the bstrips. The first n icons will be in the first bstrip, the second n icons will be
on the second bstrip. This file is generated by setting 
HKCU\Software\Microsoft\VSMSOreg\Common\TBLog to 1. Run each app. Output will be dumped into
.txt files in the %temp% directory. Use the files as input to tborder.pl.
%btndrp%\format.txt: The file that describes the icon formats that will be used. 

bstrips.exe takes as input tborder.txt, format.txt. Bstrips are generated with the name of
namexxff.bmp. Where name is the name provided in format.txt. xx starts at 00 and increments, 
ff is the two character format. In addition tbbstrip.rc, tbbstrip.mak, tbbstrip.i, tbbstrip.h
and msotbfor.h are generated.

tbbstrip.rc: List of bstrips to be include in msointl.rc. 
tbbstrip.mak: List of bstrips to be compressed at compile time, also used for dependencies.
tbbstrip.i: An array that needs to be included into a .cpp file. Allows an index from tcid 
	into a bstrip.
tbbstrip.h: Describes the format of the array in tbbstrip.i
msotbfor.h: Describes the msobf, the bstrip format types. This information comes from format.txt

MSO Project:
%mso%\tbbtn.txt: Database of non menu tcid's.
%mso%\menulist.txt: Database of menu tcid's.
%mso%\tbbar.txt: Database of tbid's.
%mso%\oldbtn.h: msobtn.h from previous version
%mso%\oldmenu.h: msomenu.h from previous version
%mso%\oldtbid.h: msobar.h from previous version

%mso%\tbbtn.pl: Takes as input tbbtn.txt, tborder.txt, oldbtn.h. Generates tbbtent.h, msobtn.h,
	tbbttn.pp, tbtip.pp, msotbcu.h, tcid2drm.h, tbidscbt.h, tbidsctt.h
%mso%\tbmenu.pl: Takes as input menulist.txt, tborder.txt, oldmenu.h. Generates msomenu.h, 
	menulist.pp, msotbcum.h
%mso%\tbar.pl: Takes as input tbbar.txt, oldtbid.h. Generates msobar.h, msobargr.h, tbbar.pp,
	tbbarenu.pp

tbbtnent.h: A mapping of tcid onto an order. The file will be included as an array that can
	be index using the tcid. The result is an order. IF the format is "full" the 
	strip and entry can be obtained by order div bstrip len and order modulo bstrip len
	If the format is NOT full. The order is used to index into the array provided by
	tbbstrip.i. This value is then used to figure out the strip and entry.
msobtn.h: The enum that maps "msotcidFoo" to 45
tbbttn.pp: The ostrman file for labels.
tbtip.pp: The ostrman file for tooltips.
msotbcu.h: Ole usage information for each control.
tcid2drm.h: Digital rights Management information for each control
tbidscbt.h: Ostrman can't deal with large tables, so the labels are split up into tables of
	1000. This is an array of ostrman ids's for the labels. Take the tcid and dev 1000 to
	index into this table. Add the value to tcid modulo 1000 to find the actual ostrman id.
tbidsctt.h: This file is layed out similarly to tbidscbt.h except it is used for tooltips.
msobar.h: The toolbar enum
msobargr.h: The index of toolbar groups. This information is used for ole merging toolbars.
tbbar.pp: The ostrman file for toolbar names. These names are localized and will appear in the
	toolbar caption.
tbbarenu.pp: The ostrman file for nonlocalized toolbar names. These names are used in VB.
msomenu.h: Enum for menus.
menulist.pp: Ostrman file for menu labels.
msotbcum.h: Oleusage for menus. Used to figure out who provides the menu.
